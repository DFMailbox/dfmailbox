openapi: "3.1.0"
info:
  title: DFMailbox API
  version: "0.0.1"
servers:
  - url: https://dfm.dftools.dev/v0
  - url: https://dfm2.dftools.dev/v0
  - url: http://localhost:8080/v0
paths:
  /plot:
    get:
      summary: Get plot info
      security:
        - ApiKey: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plot'
    post:
      summary: Register plot
      description: Register the authenticated plot
      security:
        - ApiKey: []
      requestBody:
        content:
          application/json:
            schema:
              properties:
                instance:
                  $ref: '#/components/schemas/PublicKey'
      responses:
        '201':
          description: OK
        '409':
          description: Plot registration error
          content:
            application/json:
              schema:
                oneOf:
                  - properties:
                      error:
                        type: string
                        const: plot_registered
                  - properties:
                      error:
                        type: string
                        const: unknown_instance
                  - properties:
                      error:
                        type: string
                        const: instance_key_compromised
    put:
      summary: Replace a plot's instance
      security:
        - ApiKey: []
      requestBody:
        content:
          application/json:
            schema:
              properties:
                instance:
                  $ref: '#/components/schemas/PublicKey'
      responses:
        '200':
          description: OK
        '409':
          description: Plot instance instance replacement error
          content:
            application/json:
              schema:
                oneOf:
                  - properties:
                      error:
                        type: string
                        const: plot_not_registered
                  - properties:
                      error:
                        type: string
                        const: unknown_instance
                  - properties:
                      error:
                        type: string
                        const: instance_key_compromised
    delete:
      summary: Remove plot
      security:
        - ApiKey: []
      responses:
        '200':
          description: OK
        '409':
          description: Plot deletion error
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                    const: plot_not_registered
  /plot/mailbox:
    get:
      summary: Get items from mailbox
      security:
        - ApiKey: []
      parameters:
      - name: msg_id
        description: The id to get messages after
        in: query
        required: true
        example: 0
        schema:
          $ref: '#/components/schemas/MailboxItemId'

      - name: limit
        in: query
        required: false
        example: 50
        schema:
          $ref: '#/components/schemas/MailboxItemId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FetchMailboxResult'
    post:
      summary: Post a new item into mailbox
      security:
        - ApiKey: []
      requestBody:
        $ref: '#/components/requestBodies/PostItems'
      responses:
        '200':
          $ref: '#/components/responses/PostItemsResult'
    delete:
      summary: Fetch and delete messages before an id from mailbox
      description: This prevents the mailbox from getting clogged up with messages that have already been read
      security:
        - ApiKey: []
      parameters:
        - name: msg_id
          description: The id to get messages after
          in: query
          required: true
          example: 0
          schema:
            $ref: '#/components/schemas/MailboxItemId'

        - name: limit
          in: query
          required: false
          example: 50
          schema:
            $ref: '#/components/schemas/MailboxItemId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FetchMailboxResult'
  /plot/query:
    post:
      summary: Run many mailbox operations at once
      description: Usually this is ran by a plot's polling due to the rate limiting as of writing this api. 
        It doesn't really make sense to hit this endpoint in a non DF plot context.
      security:
        - ApiKey: []
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/MailboxQueryOperation'
      responses:
        '200':
          description: Processed all queries
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/MailboxQueryResponse'
  /plot/api-key:
    get:
      summary: List all API key hashes
      description: Return all non revoked SHA256 hashed API keys
      security:
        - ApiKey: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                items:
                  properties:
                    hashed_key:
                      description: SHA256 hashed key encoded in base64
                      type: string
                    created_at:
                      description: Unix timestamp of creation
                      type: integer
                      format: int64
              example:
                - hashed_key: fh2ZUxgDyPv1a0BudAlkRUDDM7u7HG/qeXD2pqXzA48=
                  created_at: 1749445121
                - hashed_key: QLhmwfU2vtwuOGNFjMQKFDh6ILp+qtSufalOjX13iv0=
                  created_at: 1749257047
    post:
      summary: Create an API Key
      description: Generate an API key (any random string of utf-8 bytes) while storing a hashed version. Once lost, the key cannot be recovered.
      security:
        - ApiKey: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: Any random string of utf-8 characters
                properties:
                  api_key:
                    type: string
                examples:
                  - api_key: dfm_key_LbE8Gbxs6qPysnv86Ojz5gQwzad+7AQI7pLjR66Ax9
                  - api_key: br4nsMQMaiWHTULStx1MOcdZNRWTyeV7tJexOWht
                  - api_key: technically this is an an allowed key but this sucks
    delete:
      summary: Revoke all API keys
      description: Revokes every api key including the one you are using
      security:
        - ApiKey: []
      responses:
        '200':
          description: OK
  /plot/trust:
    get:
      summary: Get trusted plots
      security:
        - ApiKey: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/PlotId'
    post:
      summary: Add plots to trust
      security:
        - ApiKey: []
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/PlotId'
      responses:
        '200':
          description: OK
        '400':
          description: Plot doesn't exist
          content:
            application/json:
              schema:
                properties:
                  error:
                    const: plot_not_registered
    delete:
      summary: Un-trust plots
      security:
        - ApiKey: []
      parameters:
        - name: 'plots'
          description: A list of comma separated plots to un-trust, empty means un-trust all
          in: query
          required: false
          schema:
            items:
              $ref: '#/components/schemas/PlotId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: Plots un-trusted
                items:
                  $ref: '#/components/schemas/PlotId'
  /plots/{plot_id}:
    get:
      summary: Get another plot's info
      security:
        - ApiKey: []
      parameters:
        - $ref: '#/components/parameters/PlotId'
      responses:
        '200':
          description: Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plot'
        '404':
          description: Plot not registered
  /plots/{plot_id}/mailbox:
    post:
      summary: Post a new item into another plot's mailbox
      security:
        - ApiKey: []
      parameters:
        - $ref: '#/components/parameters/PlotId'
      requestBody:
        $ref: '#/components/requestBodies/PostItems'
      responses:
        '200':
          $ref: '#/components/responses/PostItemsResult'
  /instance:
    get:
      summary: Get instance address by key
      description: This is to check what the instance thinks the address is
      parameters:
        - name: public_key
          in: query
          schema:
            $ref: '#/components/schemas/PublicKey'
      responses:
        '200':
          description: Found
          content:
            application/json:
              schema:
                properties:
                  address:
                    $ref: '#/components/schemas/Address'
        '404':
          description: Unknown instance
    post:
      summary: Introduce an instance
      description: Add an instance to this instance's database. 
        This will make this instance tell the newly added instance to add itself.
      requestBody:
        content:
          application/json:
            schema:
              properties:
                public_key:
                  description: Public key of the instance you wish to introduce
                  $ref: '#/components/schemas/PublicKey'
                address:
                  description: Address of the instance you wish to introduce
                  $ref: '#/components/schemas/Address'
      responses:
        '200':
          description: OK
        '400':
          description: Error introducing instance
          content:
            application/json:
              schema:
                oneOf:
                  - properties:
                      error:
                        const: instance_unreachable
                      error_message:
                        $ref: '#/components/schemas/ErrorMessage'
                  - properties:
                      error:
                        const: non_compliance
                      error_message:
                        $ref: '#/components/schemas/ErrorMessage'
                  - properties:
                      error:
                        const: mismatched_address
                      expected_address:
                        $ref: '#/components/schemas/Address'
                  - properties:
                      error:
                        const: mismatched_public_key
                      expected_key:
                        $ref: '#/components/schemas/PublicKey'

  /federation/instance:
    get:
      summary: Verify the instance's ownership of the private key
      description: Verify that the instance owns the ed25519 private key by providing a uuid challenge.
      parameters:
        - name: challenge
          in: query
          schema:
            $ref: '#/components/schemas/Uuid'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                properties:
                  public_key:
                    $ref: '#/components/schemas/PublicKey'
                  signature:
                    $ref: '#/components/schemas/Signature'
                  address:
                    $ref: '#/components/schemas/Address'
        '400':
          description: Challenge is not a uuid
    post:
      summary: Refresh identity token
      description: Request a new identity token by completing a challenge
      requestBody:
        content:
          application/json:
            schema:
              properties:
                challenge:
                  $ref: '#/components/schemas/Uuid'
                signature:
                  $ref: '#/components/schemas/Signature'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                properties:
                  identity_token:
                    type: string
              example:
                identity_token: Pheikae3eeghahn8oruire this can literally be anything <128 chars
    delete:
      summary: Mark instance key as compromised
      description: When the private key gets compromised and you have the key, you may "revoke" it.
        To do this, complete a challenge
      parameters:
        - name: challenge
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Uuid'
        - name: signature
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Signature'

      responses:
        '200':
          description: Key successfully marked as compromised
        '201':
          description: Created challenge
          content:
            application/json:
              schema:
                properties:
                  challenge:
                    $ref: '#/components/schemas/Uuid'
        '400':
          description: Error
          content:
            application/json:
              schema:
                oneOf:
                  - properties:
                      error:
                        const: challenge_failed

  /federation/challenge:
    post:
      summary: Create a new UUID for a challenge
      description: This challenge will be valid for 120 seconds and used to validate that your own your private key.<br>
        To complete a challenge, sign the `instance address to bytes` + `uuid bytes` and base64 the signature.
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                properties:
                  challenge:
                    $ref: '#/components/schemas/Uuid'
  /federation/mailbox:
    post:
      summary: Send a message to another plot
      security:
        - Identity: []
      requestBody:
        content:
          application/json:
            schema:
              properties:
                from:
                  $ref: '#/components/schemas/PlotId'
                to:
                  $ref: '#/components/schemas/PlotId'
                data:
                  $ref: '#/components/schemas/MailboxItemId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                properties:
                  msg_id:
                    $ref: '#/components/schemas/MailboxItemId'
        '400':
          description: Failed to post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CrossInstancePostError'

components:
  schemas:
    Plot:
      description: A known plot
      properties:
        plot_id:
          $ref: '#/components/schemas/PlotId'
        owner:
          $ref: '#/components/schemas/Uuid'
        public_key:
          $ref: '#/components/schemas/PublicKey'
        address:
          description: An `Address`, if null, means it has the private key has been compromised
          type:
            - 'null'
            - string
          example: "dfm2.dftools.dev"
        mailbox_msg_id:
          description: The current message ID the mailbox is on
          $ref: '#/components/schemas/MailboxItemId'
    MailboxItem:
      description: An item in the mailbox
      properties:
        msg_id:
          $ref: '#/components/schemas/MailboxItemId'
        timestamp:
          description: A unix timestamp
          type: integer
        plot_origin:
          $ref: '#/components/schemas/PlotId'
        val:
          $ref: '#/components/schemas/DFJson'
    FetchMailboxResult:
      properties:
        items: # Key named 'items'
          items: # 'items' contains items of
            $ref: '#/components/schemas/MailboxItem'
        until:
          description: The last mailbox item id of the returned items
          $ref: '#/components/schemas/MailboxItemId'
        current_id:
          # TODO: Check if this is really useful
          description: The ID of the next item
          $ref: '#/components/schemas/MailboxItemId'
      example:
        items:
          - msg_id: 33
            timestamp: 1749866772
            plot_origin: 43780
            val:
              id: dict
              val:
                name:
                  id: str
                  val: Notch
                msg:
                  id: comp
                  val: <b>Hello chat</b>
          - msg_id: 34
            timestamp: 1749866774
            plot_origin: 43780
            val:
              id: dict
              val:
                name:
                  id: str
                  val: Jeremaster
                msg:
                  id: comp
                  val: Wow this is a real message!
        until: 34
        current_id: 35

    MailboxQueryOperation:
      oneOf:
        - description: Imitates GET /plot/mailbox
          properties:
            type:
              const: peek
            after:
              description: The mailbox item id to get messages after
              $ref: '#/components/schemas/MailboxItemId'
            limit:
              type:
                - 'null'
                - integer
          example:
            type: peek
            after: 32
            limit: null
        - description: Imitates DELETE /plot/mailbox
          properties:
            type:
              const: dequeue
            after:
              description: The mailbox item id to get messages after
              $ref: '#/components/schemas/MailboxItemId'
          example:
            type: dequeue
            after: 32
        - description: Imitates POST /plot/mailbox
          properties:
            type:
              const: enqueue
            value:
              items:
                $ref: '#/components/schemas/DFJson'
            to:
              $ref: '#/components/schemas/PlotId'
          example:
            type: enqueue
            value:
              - id: str
                val: You know what is better than &fballs?
              - id: str
                val: It's <white>balls
        - description: Imitates
          properties:
            type:
              const: cleanup
            before_at:
              description: Delete this item and all items before it
              $ref: '#/components/schemas/MailboxItemId'
          example:
            type: cleanup
            before_at: 4
    MailboxQueryResponse:
      oneOf:
        - properties:
            type:
              const: peek
            result:
              $ref: '#/components/schemas/FetchMailboxResult'
        - properties:
            type:
              const: dequeue
            result:
              $ref: '#/components/schemas/FetchMailboxResult'
        - properties:
            type:
              const: enqueue
            msg_id:
              $ref: '#/components/schemas/MailboxItemId'
          example:
            type: enqueue
            msg_id: 35
        - properties:
            type:
              const: cleanup
        - properties:
            type:
              const: error
            msg:
              $ref: '#/components/schemas/PostItemsError'
    PostItemsError:
      oneOf:
        - properties:
            error:
              const: plot_not_trusted
            expected_key:
              $ref: '#/components/schemas/PublicKey'
        - properties:
            error:
              const: plot_not_registered
    CrossInstancePostError:
      oneOf:
        - properties:
            error:
              const: sender_not_registered
        - properties:
            error:
              const: sender_is_owned
        - properties:
            error:
              const: sender_key_mismatch
            actual_key:
              $ref: '#/components/schemas/PublicKey'
        - properties:
            error:
              const: receiver_not_registered
        - properties:
            error:
              const: receiver_not_owned
        - properties:
            error:
              const: sender_not_trusted

    # Basic schemas
    PublicKey:
      description: A base64 URL encoded ed25519 public key
      type: string
      example: "0nqH2kJLWxfqdH0QIsKJp84Ck9OhPWCHZ3uMmcoknSY"
    Signature:
      description: A base64 encoded ed25519 signature
      type: string
      example: "7lv2/Z05t53d6LyjA+kXFO5gSIO308sgJ3pX5YAB2Kw9wXP6ZztXrYfkUVSRW0b+cIlPul7F5WQ9dPRPuYH3AA=="
    Address:
      description: An address pointing to another DFMailbox instance
      type: string
      example: "dfm.dftools.dev"
    Uuid:
      type: string
      description: A UUID (universally unique identifier)
      examples:
        - "069a79f4-44e9-4726-a5be-fca90e38aaf5"
        - "069a79f444e94726a5befca90e38aaf5"
    PlotId:
      type: integer
      format: int32
      description: An id assigned by DiamondFire to identify a plot, this ID can be used in /plot <plot_id>
      example: 41808
    MailboxItemId:
      type: integer
      format: int64
      description: A mailbox item id that refers to an item in any mailbox
      example: 42
    DFJson:
      description: A DFJson object
      $ref: 'https://dftools.dev/dfjson/schema/dfjson-0.1.1.json'
      examples:
        - id: str
          val: "Hello DFMailbox"
        - id: num
          val: 42
    ErrorMessage:
      description: A non-standard error message explaining in human terms
      type: string


  requestBodies:
    PostItems:
      description: Items to post. The first item goes in first, last item goes in last.
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/DFJson'
          example:
            - id: str
              val: "Hello DFMailbox"
            - id: vec
              x: 1
              y: 2
              z: 3
  responses:
    PostItemsResult:
      description: Posted
      content:
        application/json:
          schema:
            description: The message Id before the post
            properties:
              msg_id:
                $ref: '#/components/schemas/MailboxItemId'
    PostItemsFailure:
      description: Cannot post to plot mailbox
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PostItemsError'

  parameters:
    PlotId:
      name: plot_id
      in: path
      required: true
      schema:
        type: integer
  securitySchemes:
    ApiKey:
      type: apiKey
      name: x-api-key
      in: header
    Identity:
      type: apiKey
      name: x-identity-token
      description: A key used by instances to communicate with one another
      in: header
    Plot:
      type: apiKey
      name: user-agent
      description: Can only be used by DiamondFire IPs, found in the User-Agent header.
        If you are a user of this API, you cannot use this authentication.
      in: header
